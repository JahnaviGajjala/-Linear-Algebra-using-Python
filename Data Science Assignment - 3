{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPfzE34zC2UwFW9GS7tsTdS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JahnaviGajjala/-Linear-Algebra-using-Python/blob/main/Data%20Science%20Assignment%20-%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "BniGZUwuWdwy"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "pd.set_option('display.max_rows', None)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/train (1).csv')\n",
        "data_test = pd.read_csv('/content/test.csv')"
      ],
      "metadata": {
        "id": "TfKO5_DBmiRt"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "dZCG2M7HmxUE",
        "outputId": "bef4664d-2760-4797-ed3a-3161c5fd724f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
              "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
              "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
              "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
              "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
              "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
              "\n",
              "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
              "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
              "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
              "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
              "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
              "4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n",
              "\n",
              "  YrSold  SaleType  SaleCondition  SalePrice  \n",
              "0   2008        WD         Normal     208500  \n",
              "1   2007        WD         Normal     181500  \n",
              "2   2008        WD         Normal     223500  \n",
              "3   2006        WD        Abnorml     140000  \n",
              "4   2008        WD         Normal     250000  \n",
              "\n",
              "[5 rows x 81 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f42b31f-5bdc-4096-af87-15cc7c0831c4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>MSZoning</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>Street</th>\n",
              "      <th>Alley</th>\n",
              "      <th>LotShape</th>\n",
              "      <th>LandContour</th>\n",
              "      <th>Utilities</th>\n",
              "      <th>...</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>PoolQC</th>\n",
              "      <th>Fence</th>\n",
              "      <th>MiscFeature</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SaleType</th>\n",
              "      <th>SaleCondition</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>65.0</td>\n",
              "      <td>8450</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>208500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>RL</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9600</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2007</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>181500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>68.0</td>\n",
              "      <td>11250</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>223500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>70</td>\n",
              "      <td>RL</td>\n",
              "      <td>60.0</td>\n",
              "      <td>9550</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2006</td>\n",
              "      <td>WD</td>\n",
              "      <td>Abnorml</td>\n",
              "      <td>140000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>84.0</td>\n",
              "      <td>14260</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>250000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 81 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f42b31f-5bdc-4096-af87-15cc7c0831c4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f42b31f-5bdc-4096-af87-15cc7c0831c4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f42b31f-5bdc-4096-af87-15cc7c0831c4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b0d8ce2b-524f-4a28-ad44-d8e294040de4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0d8ce2b-524f-4a28-ad44-d8e294040de4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b0d8ce2b-524f-4a28-ad44-d8e294040de4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uDZKPbMemzu3",
        "outputId": "c1f6e814-f596-4259-fd34-3c7d4500e7e0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1460 entries, 0 to 1459\n",
            "Data columns (total 81 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Id             1460 non-null   int64  \n",
            " 1   MSSubClass     1460 non-null   int64  \n",
            " 2   MSZoning       1460 non-null   object \n",
            " 3   LotFrontage    1201 non-null   float64\n",
            " 4   LotArea        1460 non-null   int64  \n",
            " 5   Street         1460 non-null   object \n",
            " 6   Alley          91 non-null     object \n",
            " 7   LotShape       1460 non-null   object \n",
            " 8   LandContour    1460 non-null   object \n",
            " 9   Utilities      1460 non-null   object \n",
            " 10  LotConfig      1460 non-null   object \n",
            " 11  LandSlope      1460 non-null   object \n",
            " 12  Neighborhood   1460 non-null   object \n",
            " 13  Condition1     1460 non-null   object \n",
            " 14  Condition2     1460 non-null   object \n",
            " 15  BldgType       1460 non-null   object \n",
            " 16  HouseStyle     1460 non-null   object \n",
            " 17  OverallQual    1460 non-null   int64  \n",
            " 18  OverallCond    1460 non-null   int64  \n",
            " 19  YearBuilt      1460 non-null   int64  \n",
            " 20  YearRemodAdd   1460 non-null   int64  \n",
            " 21  RoofStyle      1460 non-null   object \n",
            " 22  RoofMatl       1460 non-null   object \n",
            " 23  Exterior1st    1460 non-null   object \n",
            " 24  Exterior2nd    1460 non-null   object \n",
            " 25  MasVnrType     1452 non-null   object \n",
            " 26  MasVnrArea     1452 non-null   float64\n",
            " 27  ExterQual      1460 non-null   object \n",
            " 28  ExterCond      1460 non-null   object \n",
            " 29  Foundation     1460 non-null   object \n",
            " 30  BsmtQual       1423 non-null   object \n",
            " 31  BsmtCond       1423 non-null   object \n",
            " 32  BsmtExposure   1422 non-null   object \n",
            " 33  BsmtFinType1   1423 non-null   object \n",
            " 34  BsmtFinSF1     1460 non-null   int64  \n",
            " 35  BsmtFinType2   1422 non-null   object \n",
            " 36  BsmtFinSF2     1460 non-null   int64  \n",
            " 37  BsmtUnfSF      1460 non-null   int64  \n",
            " 38  TotalBsmtSF    1460 non-null   int64  \n",
            " 39  Heating        1460 non-null   object \n",
            " 40  HeatingQC      1460 non-null   object \n",
            " 41  CentralAir     1460 non-null   object \n",
            " 42  Electrical     1459 non-null   object \n",
            " 43  1stFlrSF       1460 non-null   int64  \n",
            " 44  2ndFlrSF       1460 non-null   int64  \n",
            " 45  LowQualFinSF   1460 non-null   int64  \n",
            " 46  GrLivArea      1460 non-null   int64  \n",
            " 47  BsmtFullBath   1460 non-null   int64  \n",
            " 48  BsmtHalfBath   1460 non-null   int64  \n",
            " 49  FullBath       1460 non-null   int64  \n",
            " 50  HalfBath       1460 non-null   int64  \n",
            " 51  BedroomAbvGr   1460 non-null   int64  \n",
            " 52  KitchenAbvGr   1460 non-null   int64  \n",
            " 53  KitchenQual    1460 non-null   object \n",
            " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
            " 55  Functional     1460 non-null   object \n",
            " 56  Fireplaces     1460 non-null   int64  \n",
            " 57  FireplaceQu    770 non-null    object \n",
            " 58  GarageType     1379 non-null   object \n",
            " 59  GarageYrBlt    1379 non-null   float64\n",
            " 60  GarageFinish   1379 non-null   object \n",
            " 61  GarageCars     1460 non-null   int64  \n",
            " 62  GarageArea     1460 non-null   int64  \n",
            " 63  GarageQual     1379 non-null   object \n",
            " 64  GarageCond     1379 non-null   object \n",
            " 65  PavedDrive     1460 non-null   object \n",
            " 66  WoodDeckSF     1460 non-null   int64  \n",
            " 67  OpenPorchSF    1460 non-null   int64  \n",
            " 68  EnclosedPorch  1460 non-null   int64  \n",
            " 69  3SsnPorch      1460 non-null   int64  \n",
            " 70  ScreenPorch    1460 non-null   int64  \n",
            " 71  PoolArea       1460 non-null   int64  \n",
            " 72  PoolQC         7 non-null      object \n",
            " 73  Fence          281 non-null    object \n",
            " 74  MiscFeature    54 non-null     object \n",
            " 75  MiscVal        1460 non-null   int64  \n",
            " 76  MoSold         1460 non-null   int64  \n",
            " 77  YrSold         1460 non-null   int64  \n",
            " 78  SaleType       1460 non-null   object \n",
            " 79  SaleCondition  1460 non-null   object \n",
            " 80  SalePrice      1460 non-null   int64  \n",
            "dtypes: float64(3), int64(35), object(43)\n",
            "memory usage: 924.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_rows', None)\n",
        "data.isna().sum().sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M7QZsykxoPLr",
        "outputId": "88fdaf26-5ae9-4134-f21c-2db854999033"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PoolQC           1453\n",
              "MiscFeature      1406\n",
              "Alley            1369\n",
              "Fence            1179\n",
              "FireplaceQu       690\n",
              "LotFrontage       259\n",
              "GarageYrBlt        81\n",
              "GarageCond         81\n",
              "GarageType         81\n",
              "GarageFinish       81\n",
              "GarageQual         81\n",
              "BsmtFinType2       38\n",
              "BsmtExposure       38\n",
              "BsmtQual           37\n",
              "BsmtCond           37\n",
              "BsmtFinType1       37\n",
              "MasVnrArea          8\n",
              "MasVnrType          8\n",
              "Electrical          1\n",
              "Id                  0\n",
              "Functional          0\n",
              "Fireplaces          0\n",
              "KitchenQual         0\n",
              "KitchenAbvGr        0\n",
              "BedroomAbvGr        0\n",
              "HalfBath            0\n",
              "FullBath            0\n",
              "BsmtHalfBath        0\n",
              "TotRmsAbvGrd        0\n",
              "GarageCars          0\n",
              "GrLivArea           0\n",
              "GarageArea          0\n",
              "PavedDrive          0\n",
              "WoodDeckSF          0\n",
              "OpenPorchSF         0\n",
              "EnclosedPorch       0\n",
              "3SsnPorch           0\n",
              "ScreenPorch         0\n",
              "PoolArea            0\n",
              "MiscVal             0\n",
              "MoSold              0\n",
              "YrSold              0\n",
              "SaleType            0\n",
              "SaleCondition       0\n",
              "BsmtFullBath        0\n",
              "HeatingQC           0\n",
              "LowQualFinSF        0\n",
              "LandSlope           0\n",
              "OverallQual         0\n",
              "HouseStyle          0\n",
              "BldgType            0\n",
              "Condition2          0\n",
              "Condition1          0\n",
              "Neighborhood        0\n",
              "LotConfig           0\n",
              "YearBuilt           0\n",
              "Utilities           0\n",
              "LandContour         0\n",
              "LotShape            0\n",
              "Street              0\n",
              "LotArea             0\n",
              "MSZoning            0\n",
              "OverallCond         0\n",
              "YearRemodAdd        0\n",
              "2ndFlrSF            0\n",
              "BsmtFinSF2          0\n",
              "1stFlrSF            0\n",
              "CentralAir          0\n",
              "MSSubClass          0\n",
              "Heating             0\n",
              "TotalBsmtSF         0\n",
              "BsmtUnfSF           0\n",
              "BsmtFinSF1          0\n",
              "RoofStyle           0\n",
              "Foundation          0\n",
              "ExterCond           0\n",
              "ExterQual           0\n",
              "Exterior2nd         0\n",
              "Exterior1st         0\n",
              "RoofMatl            0\n",
              "SalePrice           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the distribution of SalePrice\n",
        "plt.figure(figsize=(14, 6))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(data['SalePrice'], kde=True)\n",
        "plt.title('Distribution of SalePrice')\n",
        "plt.xlabel('SalePrice')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "# Plot the distribution of the log-transformed SalePrice\n",
        "plt.subplot(1, 2, 2)\n",
        "log_sale_price = np.log(data['SalePrice'])\n",
        "sns.histplot(log_sale_price, kde=True)\n",
        "plt.title('Distribution of Log-Transformed SalePrice')\n",
        "plt.xlabel('Log of SalePrice')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "AZ38yIyhm2LO",
        "outputId": "535ab154-f0d6-4455-fad7-e34a04aad69d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABW0AAAJOCAYAAADMCCWlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADzR0lEQVR4nOzdd3hUdfr+8Xsmk0x67yQEpEtXV1ZBAWWl2OsXFxUVxXXXXpe1Y2GtP2yr6xaxoK6Vdd1FpSkWQFpoFloIkF5I75nz+2MyIyMBQpjkzCTv13XNtZtzzpy5Uwwnzzzn+VgMwzAEAAAAAAAAAPAJVrMDAAAAAAAAAAB+RtEWAAAAAAAAAHwIRVsAAAAAAAAA8CEUbQEAAAAAAADAh1C0BQAAAAAAAAAfQtEWAAAAAAAAAHwIRVsAAAAAAAAA8CEUbQEAAAAAAADAh1C0BQAAAAAAAAAfQtEWgE948MEHZbFYOuW1xo0bp3Hjxrk//uKLL2SxWPT+++93yutfeeWV6tWrV6e8VntVVVXpmmuuUXJysiwWi2655ZZOe23X9+OLL77otNfcnz98fwAAMAvXbL7FzGu27qKpqUl33XWX0tPTZbVadd5555kdyWt69eqlK6+8stNfd968ebJYLNq1a1env7Z04O8WwFdRtAXgda5/hF2P4OBgpaamauLEiXruuedUWVnpldfJzc3Vgw8+qMzMTK+cz5t8OVtbPPbYY5o3b56uv/56vfHGG7r88ssPemxDQ4OeffZZjRw5UpGRkYqOjtbgwYM1c+ZM/fjjj52YuvWfvf79++uGG25QQUFBp2YBAMDXcc3m29na4kiu2Xr16qWzzjqrE9N5chX8D/fwtWLaP//5Tz355JO66KKL9Nprr+nWW281O1Knq6qq0gMPPKAhQ4YoLCxMcXFxGjFihG6++Wbl5uZ2apZf/hyFhobq2GOP1b333quKiopOzQJ0NJvZAQB0XbNnz1bv3r3V2Nio/Px8ffHFF7rlllv0zDPP6OOPP9awYcPcx95777364x//eETnz83N1UMPPaRevXppxIgRbX7e559/fkSv0x6Hyva3v/1NDoejwzMcjaVLl+rXv/61HnjggcMee+GFF2rhwoW69NJLde2116qxsVE//vijPvnkE5188skaOHBgJyT25PrZq6ur09dff62XXnpJ//vf/7R582aFhoYe8rn+8P0BAMCbuGbrHtdsZrvgggvUt29f98dVVVW6/vrrdf755+uCCy5wb09KSjIj3kEtXbpUPXr00P/7f//P7CimaGxs1Kmnnqoff/xR06dP14033qiqqipt2bJFb731ls4//3ylpqZ2eq6XXnpJ4eHhqqqq0ueff65HH31US5cu1TfffHPYuwE643cL4A0UbQF0mMmTJ+uEE05wfzxr1iwtXbpUZ511ls455xz98MMPCgkJkSTZbDbZbB37K6mmpkahoaEKCgrq0Nc5nMDAQFNfvy0KCwt17LHHHva41atX65NPPtGjjz6qP/3pTx77XnjhBZWVlXVQwkPb/2fvmmuuUVxcnJ555hn9+9//1qWXXtrqc6qrqxUWFuYX3x8AALyJa7bW+cM1QVuv2XzBsGHDPN4AKC4u1vXXX69hw4bpsssuO+jz6urqFBQUJKvVnBuFCwsLFR0d7bXzORwONTQ0KDg42Gvn7EgLFizQ+vXrNX/+fP32t7/12FdXV6eGhgZTcl100UWKj4+XJP3ud7/ThRdeqA8//FArV67USSed1OpzfOV3C9BWjEcA0KlOO+003XfffcrOztabb77p3t7afLRFixZpzJgxio6OVnh4uAYMGOAuDH7xxRf61a9+JUm66qqr3LfHzJs3T5JzTtGQIUO0du1anXrqqQoNDXU/92AzjJqbm/WnP/1JycnJCgsL0znnnKM9e/Z4HHOwuU/7n/Nw2Vqbj1ZdXa3bb79d6enpstvtGjBggJ566ikZhuFxnMVi0Q033KAFCxZoyJAhstvtGjx4sD799NPWv+C/UFhYqBkzZigpKUnBwcEaPny4XnvtNfd+16y4rKws/fe//3VnP9i8qR07dkiSRo8efcC+gIAAxcXFuT/Ozs7W73//ew0YMEAhISGKi4vTxRdf3OZZVqtWrdKkSZMUFRWl0NBQjR07Vt98802bnnvaaadJkrKysiQ5vwfh4eHasWOHpkyZooiICE2bNs2975ffH4fDoWeffVZDhw5VcHCwEhISNGnSJK1Zs8bjuDfffFPHH3+8QkJCFBsbq6lTpx7wMwQAgD/gmq1rXbO1VVNTkx5++GH16dNHdrtdvXr10p/+9CfV19d7HOdwOPTggw8qNTVVoaGhGj9+vL7//vujnpHq+rzeeecd3XvvverRo4dCQ0NVUVGh0tJS3XHHHRo6dKjCw8MVGRmpyZMna8OGDa2e491339Wjjz6qtLQ0BQcH6/TTT9f27ds9jt22bZsuvPBCJScnKzg4WGlpaZo6darKy8u1a9cuWSwWLVu2TFu2bHF/jV3rLhzpz8L8+fM1ePBg2e12ffrpp+7xJF9//bVuuukmJSQkKDo6Wtddd50aGhpUVlamK664QjExMYqJidFdd911wLkdDofmzp2rwYMHKzg4WElJSbruuuu0b98+j+MMw9AjjzyitLQ09/dry5YtbfqeHOp6Pzg4WJGRke6PN27cqCuvvFLHHHOMgoODlZycrKuvvlolJSVteq2FCxfqlFNOUVhYmCIiInTmmWe2Oecvr/eP9HdLXV2dHnzwQfXv31/BwcFKSUnRBRdc4P78pbZ/vQFvodMWQKe7/PLL9ac//Umff/65rr322laP2bJli8466ywNGzZMs2fPlt1u1/bt291FukGDBmn27Nm6//77NXPmTJ1yyimSpJNPPtl9jpKSEk2ePFlTp07VZZdddthbrR599FFZLBbdfffdKiws1Ny5czVhwgRlZma6u0vaoi3Z9mcYhs455xwtW7ZMM2bM0IgRI/TZZ5/pzjvvVE5OzgG3Yn399df68MMP9fvf/14RERF67rnndOGFF2r37t0eRdJfqq2t1bhx47R9+3bdcMMN6t27t9577z1deeWVKisr080336xBgwbpjTfe0K233qq0tDTdfvvtkqSEhIRWz5mRkSFJmj9/vkaPHn3IzpvVq1fr22+/1dSpU5WWlqZdu3bppZde0rhx4/T9998fcmzB0qVLNXnyZB1//PF64IEHZLVa9eqrr+q0007TV199pRNPPPGgz5V+vtjc/+vT1NSkiRMnasyYMXrqqacO+fozZszQvHnzNHnyZF1zzTVqamrSV199pZUrV7o7kx599FHdd999uuSSS3TNNdeoqKhIzz//vE499VStX7/eqx0aAAB0Bq7ZPPnzNVtbXXPNNXrttdd00UUX6fbbb9eqVas0Z84c/fDDD/roo4/cx82aNUtPPPGEzj77bE2cOFEbNmzQxIkTVVdXd1Sv7/Lwww8rKChId9xxh+rr6xUUFKTvv/9eCxYs0MUXX6zevXuroKBAf/3rXzV27Fh9//33B9yi/+c//1lWq1V33HGHysvL9cQTT2jatGlatWqVJOe6DBMnTlR9fb1uvPFGJScnKycnR5988onKysqUkJCgN954Q48++qiqqqo0Z84cSc6fmyP9WVi6dKneffdd3XDDDYqPj1evXr3cc5Rdr/3QQw9p5cqVeuWVVxQdHa1vv/1WPXv21GOPPab//e9/evLJJzVkyBBdccUV7vNed911mjdvnq666irddNNNysrK0gsvvKD169frm2++cXeL33///XrkkUc0ZcoUTZkyRevWrdMZZ5zRpi5Z1/X+66+/rnvvvfeQowcWLVqknTt36qqrrlJycrK2bNmiV155RVu2bNHKlSsP+dw33nhD06dP18SJE/X444+rpqZGL730ksaMGaP169cfdlHA1q732/q7pbm5WWeddZaWLFmiqVOn6uabb1ZlZaUWLVqkzZs3q0+fPpLa/vUGvMYAAC979dVXDUnG6tWrD3pMVFSUMXLkSPfHDzzwgLH/r6T/9//+nyHJKCoqOug5Vq9ebUgyXn311QP2jR071pBkvPzyy63uGzt2rPvjZcuWGZKMHj16GBUVFe7t7777riHJePbZZ93bMjIyjOnTpx/2nIfKNn36dCMjI8P98YIFCwxJxiOPPOJx3EUXXWRYLBZj+/bt7m2SjKCgII9tGzZsMCQZzz///AGvtb+5c+cakow333zTva2hocE46aSTjPDwcI/PPSMjwzjzzDMPeT7DMAyHw+H+WiclJRmXXnqp8eKLLxrZ2dkHHFtTU3PAthUrVhiSjNdff929zfX9WLZsmfs1+vXrZ0ycONFwOBwe5+vdu7fxm9/8xr3N9bO3ePFio6ioyNizZ4/xzjvvGHFxcUZISIixd+9ewzCc3wNJxh//+McDMv3y+7N06VJDknHTTTe1+vkbhmHs2rXLCAgIMB599FGP/Zs2bTJsNtsB2wEA8AVcs3Wfa7a2HJuZmWlIMq655hqP7XfccYchyVi6dKlhGIaRn59v2Gw247zzzvM47sEHHzQktfp1b01RUZEhyXjggQfc21zf42OOOeaAa8e6ujqjubnZY1tWVpZht9uN2bNnH3COQYMGGfX19e7tzz77rCHJ2LRpk2EYhrF+/XpDkvHee+8dMufYsWONwYMHe2w70p8Fq9VqbNmyxeNY139/v7zGPemkkwyLxWL87ne/c29ramoy0tLSPH52v/rqK0OSMX/+fI/zfvrppx7bCwsLjaCgIOPMM8/0eJ0//elPbfp+1dTUGAMGDDAkGRkZGcaVV15p/OMf/zAKCgpaPfaX3n77bUOSsXz58gM+96ysLMMwDKOystKIjo42rr32Wo/n5ufnG1FRUR7bXb+DfvrpJ6OoqMjIysoy/vrXvxp2u91ISkoyqqurDcM4st8t//znPw1JxjPPPHPAsa6vWVu/3oA3MR4BgCnCw8MPuSKxqyvx3//+d7sXgLDb7brqqqvafPwVV1yhiIgI98cXXXSRUlJS9L///a9dr99W//vf/xQQEKCbbrrJY/vtt98uwzC0cOFCj+0TJkxwv9srOeeDRUZGaufOnYd9neTkZI+ZroGBgbrppptUVVWlL7/88oizWywWffbZZ3rkkUcUExOjt99+W3/4wx+UkZGh//u///OYabt/50tjY6NKSkrUt29fRUdHa926dQd9jczMTG3btk2//e1vVVJSouLiYhUXF6u6ulqnn366li9ffsDPyIQJE5SQkKD09HRNnTpV4eHh+uijj9SjRw+P466//vrDfo4ffPCBLBZLqwt8uLoFPvzwQzkcDl1yySXufMXFxUpOTla/fv20bNmyw74OAAC+iGu2n/nzNVtbuL5+t912m8d2Vxfvf//7X0nSkiVL1NTUpN///vcex914441eyzJ9+vQDuqbtdrt7rm1zc7NKSkrc4zhau5a86qqrPGaXujqpXV//qKgoSdJnn32mmpqaI8p3pD8LY8eOPejs4RkzZnh0oI4aNUqGYWjGjBnubQEBATrhhBM8fnbee+89RUVF6Te/+Y3H9efxxx+v8PBw9/Xn4sWL1dDQoBtvvNHjdW655ZY2fa4hISFatWqV7rzzTknSvHnzNGPGDKWkpOjGG2/0GJ2x//esrq5OxcXF+vWvfy1Jh7zeX7RokcrKynTppZd6fC4BAQEaNWpUq9fSAwYMUEJCgnr37q3rrrtOffv21X//+1+Pu+fa+rvlgw8+UHx8fKs/w66vWVu/3oA3MR4BgCmqqqqUmJh40P3/93//p7///e+65ppr9Mc//lGnn366LrjgAl100UVtXoSgR48eRzRkvl+/fh4fWywW9e3b96hngx1Odna2UlNTPf74kJy3Xrn2769nz54HnCMmJuaws5Sys7PVr1+/A75+B3udtrLb7brnnnt0zz33KC8vT19++aWeffZZvfvuuwoMDHTPwautrdWcOXP06quvKicnx2MmV3l5+UHPv23bNknOi/eDKS8vV0xMjPvjF198Uf3795fNZlNSUpIGDBhwwOdts9mUlpZ22M9vx44dSk1NVWxs7CEzGoZxwM+QC7dKAQD8FddsP/P3a7bDyc7OltVqVd++fT22JycnKzo62v26rv/95XGxsbEe12PNzc0qKio64Ji2fK979+59wDbXGgN/+ctflJWVpebmZve+1sZN/PLr78rm+vr37t1bt912m5555hnNnz9fp5xyis455xxddtll7oLuwRzpz0Jrn8/BcrpeOz09/YDt+//sbNu2TeXl5Qf977OwsNAjyy//u0lISPD4fh1KVFSUnnjiCT3xxBPKzs7WkiVL9NRTT+mFF15QVFSUHnnkEUlSaWmpHnroIb3zzjvu13dpy/W+ay7tL+0/N9flgw8+UGRkpAIDA5WWlubxBolLW3+37NixQwMGDDjkqLe2fr0Bb6JoC6DT7d27V+Xl5Qdc6O0vJCREy5cv17Jly/Tf//5Xn376qf71r3/ptNNO0+eff66AgIDDvs6RzDRrq4PNYWpubm5TJm842OvsXwQ1S0pKiqZOnaoLL7xQgwcP1rvvvqt58+bJZrPpxhtv1KuvvqpbbrlFJ510kqKiomSxWDR16tRDdua49j355JMaMWJEq8eEh4d7fHziiSd6rILdmv27NY6Ww+GQxWLRwoULW/3+/DIfAAD+gGu2o+PL12yHcqi5o0diz549BxQrly1b1uricr/U2s/EY489pvvuu09XX321Hn74YcXGxspqteqWW25p9VqyLV//p59+WldeeaX+/e9/6/PPP9dNN92kOXPmaOXKlW16c7+tDvUzfrCcrW3fP7vD4VBiYqLmz5/f6vOPdr7xwWRkZOjqq6/W+eefr2OOOUbz5893F20vueQSffvtt7rzzjs1YsQIhYeHy+FwaNKkSW263n/jjTeUnJx8wP7Wiqmnnnqq4uPjD5nVm79bzPp6o3ujaAug073xxhuSpIkTJx7yOKvVqtNPP12nn366nnnmGT322GO65557tGzZMk2YMMFrF5Qurnd4XQzD0Pbt2zVs2DD3tpiYGI9b/l2ys7N1zDHHuD8+kmwZGRlavHixKisrPd6t//HHH937vSEjI0MbN26Uw+HwKFZ6+3UkZ2fpsGHDtG3bNveYgPfff1/Tp0/X008/7T6urq6u1a/n/lzvmkdGRmrChAley9hWffr00WeffabS0tKDdtv26dNHhmGod+/e6t+/fycnBACgY3DN5qkrXrP98nUdDoe2bdvm7hiVpIKCApWVlblf1/W/27dv9yjKlpSUeHSCJicna9GiRR6vMXz48Hbne//99zV+/Hj94x//8NheVlZ22OLdoQwdOlRDhw7Vvffeq2+//VajR4/Wyy+/7C5EtqazfhYOpU+fPlq8eLFGjx59yOKkK8u2bds8fvaLiooO2/V9KDExMerTp482b94sydnBvGTJEj300EO6//773cf98r/X1riu9xMTE0273l+1apUaGxsPeodcW7/egDcx0xZAp1q6dKkefvhh9e7dW9OmTTvocaWlpQdsc3VZuuYmhYWFSdJhi35t9frrr3vMbHv//feVl5enyZMnu7f16dNHK1eu9Fhp9ZNPPtGePXs8znUk2aZMmaLm5ma98MILHtv/3//7f7JYLB6vfzSmTJmi/Px8/etf/3Jva2pq0vPPP6/w8HCNHTv2iM+5bds27d69+4DtZWVlWrFihWJiYtzvOgcEBBzQWfL888973NrWmuOPP159+vTRU089paqqqgP2//K2O2+78MILZRiGHnrooQP2uT6fCy64QAEBAXrooYcO+BwNw1BJSUmHZgQAwNu4ZjuQP1+ztfV1JWnu3Lke25955hlJ0plnnilJOv3002Wz2fTSSy95HPfLr0twcLAmTJjg8Wjr7fitae1a8r333lNOTk67zldRUaGmpiaPbUOHDpXVavWY09qazvpZOJRLLrlEzc3Nevjhhw/Y19TU5P6ZnjBhggIDA/X88897fP1++X0+mA0bNqi4uPiA7dnZ2fr+++81YMAAST93Bv/ye9SW15k4caIiIyP12GOPqbGx8YD9nXG9X1xcfMD3U/r582nr1xvwJjptAXSYhQsX6scff1RTU5MKCgq0dOlSLVq0SBkZGfr4448VHBx80OfOnj1by5cv15lnnqmMjAwVFhbqL3/5i9LS0jRmzBhJzovx6Ohovfzyy4qIiFBYWJhGjRp1yJlRhxIbG6sxY8boqquuUkFBgebOnau+ffvq2muvdR9zzTXX6P3339ekSZN0ySWXaMeOHXrzzTcPmKF0JNnOPvtsjR8/Xvfcc4927dql4cOH6/PPP9e///1v3XLLLa3OZ2qPmTNn6q9//auuvPJKrV27Vr169dL777+vb775RnPnzj1gJldbbNiwQb/97W81efJknXLKKYqNjVVOTo5ee+015ebmau7cue4LuLPOOktvvPGGoqKidOyxx2rFihVavHhxqzPI9me1WvX3v/9dkydP1uDBg3XVVVepR48eysnJ0bJlyxQZGan//Oc/7fqatMX48eN1+eWX67nnntO2bdvct3d99dVXGj9+vG644Qb16dNHjzzyiGbNmqVdu3bpvPPOU0REhLKysvTRRx9p5syZuuOOOzosIwAAR4Nrtq5/zeayffv2VjtIR44cqTPPPFPTp0/XK6+8orKyMo0dO1bfffedXnvtNZ133nkaP368JCkpKUk333yznn76aZ1zzjmaNGmSNmzYoIULFyo+Pt7rndUuZ511lmbPnq2rrrpKJ598sjZt2qT58+d7dI8eiaVLl+qGG27QxRdfrP79+6upqUlvvPGGAgICdOGFFx7yuZ31s3AoY8eO1XXXXac5c+YoMzNTZ5xxhgIDA7Vt2za99957evbZZ3XRRRcpISFBd9xxh+bMmaOzzjpLU6ZM0fr1693fr8NZtGiRHnjgAZ1zzjn69a9/rfDwcO3cuVP//Oc/VV9frwcffFCS8664U089VU888YQaGxvVo0cPff7558rKyjrsa0RGRuqll17S5ZdfruOOO05Tp05VQkKCdu/erf/+978aPXp0qwVVb7niiiv0+uuv67bbbtN3332nU045RdXV1Vq8eLF+//vf69xzz23z1xvwKgMAvOzVV181JLkfQUFBRnJysvGb3/zGePbZZ42KiooDnvPAAw8Y+/9KWrJkiXHuuecaqampRlBQkJGammpceumlxtatWz2e9+9//9s49thjDZvNZkgyXn31VcMwDGPs2LHG4MGDW803duxYY+zYse6Ply1bZkgy3n77bWPWrFlGYmKiERISYpx55plGdnb2Ac9/+umnjR49ehh2u90YPXq0sWbNmgPOeahs06dPNzIyMjyOraysNG699VYjNTXVCAwMNPr162c8+eSThsPh8DhOkvGHP/zhgEwZGRnG9OnTW/1891dQUGBcddVVRnx8vBEUFGQMHTrUneuX5zvzzDPbdL4///nPxtixY42UlBTDZrMZMTExxmmnnWa8//77Hsfu27fP/drh4eHGxIkTjR9//PGA7K7vx7Jlyzyev379euOCCy4w4uLiDLvdbmRkZBiXXHKJsWTJEvcxrp+91atX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aOPGjaqqqtKMGTM0bdo0j0Uc0L3QaXt4iZHB2lFUrc25DJQHAMBsnXVN++6772r+/Pl66623NHjwYGVmZuqWW25Ramqqpk+f3q5zzpo1S7fddpv744qKCqWnp3srMgCTFFe3zLOly7bbC7BaNDg1Uqt37dOmnHKKtkA31K6irSTZbDZddtll3swCP8dM28NLalmMbNNeirYAAPiCzrimvfPOO/XHP/5RU6dOlSQNHTpU2dnZmjNnjqZPn67k5GRJUkFBgVJSUtzPKygo0IgRI1o9p91ul93OvEugq3F12saF8983pCGpUVq9a592l9aorKZB0aEU84HupF1F29dff/2Q+6+44op2hYH/MgyDTts2SIxwLka2s7ha5bWNigphFVAAAMzSWde0NTU1slo9l5IICAiQw+GQJPXu3VvJyclasmSJu0hbUVGhVatW6frrr/dKBgD+4eeiLcU5SJEhgeoVF6pdJTXanFOhMf3izY4EoBO1q2h78803e3zc2NiompoaBQUFKTQ0lKJtN1Re26jqBufqy3TaHlxIUIAcFYWyRiZqc065RvflH10AAMzSWde0Z599th599FH17NlTgwcP1vr16/XMM8/o6quvluRcAO2WW27RI488on79+ql379667777lJqaqvPOO88rGQD4PofDUGmNs2gbT6ctWgztEaVdJTXakleuX/eJlc3arvXkAfihdhVt9+3bd8C2bdu26frrr9edd9551KHgf/a2dNnGhwcpODDA5DS+rakoS0GRidq4l6ItAABm6qxr2ueff1733Xeffv/736uwsFCpqam67rrrdP/997uPueuuu1RdXa2ZM2eqrKxMY8aM0aeffqrg4GCv5QDg28pqG9XsMBQYYFFkcLsnGaKL6RUfpnC7TVX1TdpeWKWByZFmRwLQSbz2Fk2/fv305z//+YCOBXQPzLNtu+biXZKkjXvLTM0BAAAO1BHXtBEREZo7d66ys7NVW1urHTt26JFHHlFQ0M+3P1ssFs2ePVv5+fmqq6vT4sWL1b9/f69lAOD7Sqqci5DFhgXJYrGYnAa+wmqxaEgPZ6F2Uw5rowDdiVf76m02m3Jzc715SvgJ5tm2XXNRliRpI4uRAQDgk7imBWCG4ipGI6B1g1OjZLFIuWV17uI+gK6vXfdcfPzxxx4fG4ahvLw8vfDCCxo9erRXgsG/0Gnb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DXPfT+UbKhERebWmTK57//3347vvvsPnn3+ODRs2IC8vD1dffbWMqYnkkVFUifJqO7QqBQbGc5QtEbUOdzu+wYgI1OJoYSUe+t8BCCHkjkXUqA5dtBVCYP78+fjqq6+wbt06dO3a9az32bt3LwAgJibmjNtotVoEBQXVWzqTLcdLAQCj2RqBvJReo8R/bxqG8AANDueb8MBn++By8Q2ViIi809km1zUajXjnnXfw0ksv4YILLsDQoUOxYsUKbNmyBdu2bZM5PVH7EX8aZTsoIRhalVLmRETUmUQEavGfGYOhUkj4dl8e3t6YJXckokap5A7QmHnz5uHjjz/GN998g8DAQBQUFAAADAYD9Ho9jh8/jo8//hiXXHIJwsLCsH//ftx///0YP348BgwYIHN6eZgtduw/5Z6wbUxyuMxpiFouLliPt24cihnLt+GntAI8++NhPHJpb44eJyIir/fXyXVTU1Nht9sxefJkzzYpKSlITEzE1q1bMWrUqNP2YbVaYbVaPT93tjkayDcdL65CaZUNGqUCgxKC5Y5DRJ3QyG5heHRaHzz+7UEs/ukwescE4bwe4SguLva8P7eEwWBAREREKyYl6uBF26VLlwIAJk6cWO/2FStWYPbs2dBoNPj111/xyiuvoKqqCgkJCZg+fTr++c9/ypC2Y9iRVQanS6BLmB/igvVyxyE6J8O6hGLx1QPwj8/34e1NWdBrlHjgol5yxyIiImqxhibXLSgogEajQXBwcL1to6KiPIMW/mrx4sV48skn2zouUbsRQmDHCfco24EJBujUHGVLRG3jptFJ2H/KiP/tPoX5n+zGOzf0xgXD+8NkannRNijIgIyMYyzcUqvq0EXbs/UXSUhIwIYNG9opjXf4ozUCR9lS53DN0HhUWux44rtDeH1dBrQqBeZf0EPuWERERC1SN7nupk2bzmk/ixYtwoIFCzw/m0ymTje5LvmWrNIqFJutUCslDE4MkTsOEXVikiThmav6IaPIjH2njLjni8OotAvc8dxKhETGNnt/5UV5eGvhbBiNRhZtqVV16KItNV9d0XYM+9lSJzJ7bFfYnC48++MRvPDLUVRanfi/Kb2gULBVAhEReY+6yXV///33epPrRkdHw2azoaKiot5o28LCQkRHRze4L61WC61W29aRidrFn3vZDogPhp6jbImojenUSiyfNQxXvbEF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6tULISEhnm3+/Dh129Q9TlOytCchBObPn4+vvvoK69atQ9euXeutHzp0KNRqdb286enpOHnyZL1jd+DAgXoFjbo3wbpCydmOS1Oeo03JIjeXywWr1crj1ohJkybhwIED2Lt3r2cZNmwYZs6c6fk7j13TVFZW4vjx44iJieFzrhFjx45Fenp6vduOHj2KpKQkAHyPaIoVK1YgMjISl156qec2PufI17TW/88/v3ZT6zvbawq1LafTiQMHDvD53QR1BcRjx47h119/RVhYWKPb+/pn+nPV3OPdEL5+n5u6z8oN4fO79TV2vBsi+/Nb5onQZLdq1Sqh1WrFypUrxaFDh8Rtt90mgoOD683o7M3MZrPYs2eP2LNnjwAgXnrpJbFnzx7PbJBLliwRwcHB4ptvvhH79+8XV1xxhejatauoqanx7GPq1Kli8ODBYvv27WLTpk2iR48eYsaMGZ71FRUVIioqSvz9738XaWlpYtWqVcLPz08sW7bMs83mzZuFSqUSL7zwgjh8+LB4/PHHhVqtFgcOHPBs05Qs7eXOO+8UBoNB/PbbbyI/P9+zVFdXe7a54447RGJioli3bp3YtWuXGD16tBg9erRnvcPhEP369RMXXXSR2Lt3r1i9erWIiIgQixYt8myTmZkp/Pz8xIMPPigOHz4s3njjDaFUKsXq1as92zTlOXq2LO3poYceEhs2bBBZWVli//794qGHHhKSJIlffvmlSVl99bg1ZMKECeLee+/1/Mxj17AHHnhA/PbbbyIrK0ts3rxZTJ48WYSHh4uioqImZfXV47Zjxw6hUqnEM888I44dOyY++ugj4efnJz788EPPNnyPODOn0ykSExPFwoULT1vH5xx1Nq1xPnnBBReI119/3fPz2V67fdnZjndpaanYs2eP+OGHHwQAsWrVKrFnzx6Rn5/v2cff//538dBDD3l+bsrrrK9qi+P95JNPip9//lkcP35cpKamihtuuEHodDpx8ODBdv/9OprGjrfNZhOXX365iI+PF3v37q33OcxqtXr28dfXk87+mf5ctMXx5uv3mTV2vCsrK8WiRYvE1q1bxYkTJ8SuXbvEzTffLLRarUhLS/Psg8/vpmuL493Rnt8+X7QVQojXX39dJCYmCo1GI0aMGCG2bdsmd6RWs379egHgtGXWrFlCCCFcLpd49NFHRVRUlNBqtWLSpEkiPT293j5KS0vFjBkzREBAgAgKChI333yzMJvN9bbZt2+fOO+884RWqxVxcXFiyZIlp2X57LPPRM+ePYVGoxF9+/YVP/zwQ731TcnSXho6ZgDEihUrPNvU1NSIu+66S4SEhAg/Pz9x1VVX1Tt5E0KIEydOiIsvvljo9XoRHh4uHnjgAWG32+tts379ejFo0CCh0WhEt27d6j1GnbM9R5uSpb3ccsstIikpSWg0GhERESEmTZrkKdg2NasvHreG/LVoy2PXsOuvv17ExMQIjUYj4uLixPXXXy8yMjKaldUXj5sQQnz33XeiX79+QqvVipSUFPHf//633nq+R5zZzz//LAA0mIHPOepsWuN8MikpSTz++OOen8/22u3Lzna8V6xY0eD6Px/fCRMmeLavc7bXWV/VFsf7vvvu87w2R0VFiUsuuUTs3r27fX+xDqqx452VlXXGz2Hr16/37OOvrydCdO7P9OeiLY43X7/PrLHjXVNTI6666ioRGxsrNBqNiImJEZdffrnYsWNHvX3w+d10bXG8O9rzWxJCiBYM0CUiIiIiIiIiIiKiNuDTPW2JiIiIiIiIiIiIOhoWbYmIiIiIiIiIiIg6EBZtiYiIiIiIiIiIiDoQFm2JiIiIiIiIiIiIOhAWbYmIiIiIiIiIiIg6EBZtiYiIiIiIiIiIiDoQFm2JiIiIiIiIiIiIOhAWbYmIiIiIiIiIiIg6EBZtiYi8wMqVKxEcHNzmj3PixAlIkoS9e/e2+WMRERERUedXUFCACy+8EP7+/m16Pvvbb79BkiRUVFS02WPUkSQJX3/9dZs/DhH5NhZtiYjaQXFxMe68804kJiZCq9UiOjoaU6ZMwebNm9vsMbt06QJJkiBJEvz9/TFkyBB8/vnnjd4nISEB+fn56NevX5vlIiIiIqLWN3v2bFx55ZVyxzjNyy+/jPz8fOzduxdHjx5tcJvq6mosWrQI3bt3h06nQ0REBCZMmIBvvvmmTbNNnDjRc76s0+nQp08fvPnmm2e9X35+Pi6++OI2zUZEpJI7ABGRL5g+fTpsNhvee+89dOvWDYWFhVi7di1KS0vb9HGfeuopzJ07FyaTCS+++CKuv/56xMXFYcyYMadta7PZoNFoEB0d3aaZiIiIiMh3HD9+HEOHDkWPHj3OuM0dd9yB7du34/XXX0efPn1QWlqKLVu2tPm5MgDMnTsXTz31FKqrq/H+++9j3rx5CAkJwYwZM07blufLRNSeONKWiKiNVVRUYOPGjXjuuedw/vnnIykpCSNGjMCiRYtw+eWXAwBeeukl9O/fH/7+/khISMBdd92FysrKRvf7zTffYMiQIdDpdOjWrRuefPJJOByOetsEBgYiOjoaPXv2xBtvvAG9Xo/vvvsOgHsk7tNPP42bbroJQUFBuO222xpsj3Dw4EFMmzYNQUFBCAwMxLhx43D8+HHP+rfffhu9e/eGTqdDSkpKk0YnEBEREVH72rBhA0aMGAGtVouYmBg89NBD9c4dzWYzZs6cCX9/f8TExODll1/GxIkTcd999zW636VLl6J79+7QaDTo1asXPvjgA8+6Ll264H//+x/ef/99SJKE2bNnN7iPb7/9Fg8//DAuueQSdOnSBUOHDsXdd9+NW265xbPNBx98gGHDhnnOb//2t7+hqKio0WybNm3CuHHjoNfrkZCQgHvuuQdVVVX1tvHz80N0dDS6deuGJ554Aj169MC3334LwD0Sd/78+bjvvvsQHh6OKVOmADi9PcKpU6cwY8YMhIaGwt/fH8OGDcP27ds965ty3k5E9Fcs2hIRtbGAgAAEBATg66+/htVqbXAbhUKB1157DQcPHsR7772HdevW4f/+7//OuM+NGzfipptuwr333otDhw5h2bJlWLlyJZ555pkz3kelUkGtVsNms3lue+GFFzBw4EDs2bMHjz766Gn3yc3Nxfjx46HVarFu3Tqkpqbilltu8ZxkfvTRR3jsscfwzDPP4PDhw3j22Wfx6KOP4r333mvq4SEiIiKiNpabm4tLLrkEw4cPx759+7B06VK88847+Ne//uXZZsGCBdi8eTO+/fZbrFmzBhs3bsTu3bsb3e9XX32Fe++9Fw888ADS0tJw++234+abb8b69esBADt37sTUqVNx3XXXIT8/H6+++mqD+4mOjsaPP/4Is9l8xsey2+14+umnsW/fPnz99dc4ceLEGYvAgHuE79SpUzF9+nTs378fn376KTZt2oT58+c3+jvp9fp658vvvfceNBoNNm/ejLfeeuu07SsrKzFhwgTk5ubi22+/xb59+/B///d/cLlcAFp23k5EBAAQRETU5r744gsREhIidDqdGDNmjFi0aJHYt2/fGbf//PPPRVhYmOfnFStWCIPB4Pl50qRJ4tlnn613nw8++EDExMR4fk5KShIvv/yyEEIIq9Uqnn32WQFAfP/99571V155Zb19ZGVlCQBiz549QgghFi1aJLp27SpsNluDObt37y4+/vjjerc9/fTTYvTo0Wf83YiIiIio9c2aNUtcccUVDa57+OGHRa9evYTL5fLc9sYbb4iAgADhdDqFyWQSarVafP755571FRUVws/PT9x7771nfMwxY8aIuXPn1rvt2muvFZdcconn5yuuuELMmjWr0ewbNmwQ8fHxQq1Wi2HDhon77rtPbNq0qdH77Ny5UwAQZrNZCCHE+vXrBQBRXl4uhBBizpw54rbbbqt3n40bNwqFQiFqamqEEEJMmDDB8/s5HA7xwQcfCADiP//5j2f94MGDT3tsAOKrr74SQgixbNkyERgYKEpLSxvM2ZTzdiKihnCkLRFRO5g+fTry8vLw7bffYurUqfjtt98wZMgQrFy5EgDw66+/YtKkSYiLi0NgYCD+/ve/o7S0FNXV1Q3ub9++fXjqqac8o3gDAgIwd+5c5Ofn17vPwoULERAQAD8/Pzz33HNYsmQJLr30Us/6YcOGNZp77969GDduHNRq9WnrqqqqcPz4ccyZM6dejn/961/12icQERERkbwOHz6M0aNHQ5Ikz21jx45FZWUlTp06hczMTNjtdowYMcKz3mAwoFevXmfd79ixY+vdNnbsWBw+fLhZ+caPH4/MzEysXbsW11xzDQ4ePIhx48bh6aef9myTmpqKyy67DImJiQgMDMSECRMAACdPnmxwn/v27cPKlSvrnadOmTIFLpcLWVlZnu3efPNNBAQEQK/XY+7cubj//vtx5513etYPHTq00ex79+7F4MGDERoaesYcTTlvJyL6K05ERkTUTnQ6HS688EJceOGFePTRR3Hrrbfi8ccfx8SJEzFt2jTceeedeOaZZxAaGopNmzZhzpw5sNls8PPzO21flZWVePLJJ3H11Vc3+Dh1HnzwQcyePRsBAQGIioqqd6IOAP7+/o1m1uv1Z1xX13N3+fLlGDlyZL11SqWy0f0SEREREf2ZWq3GuHHjMG7cOCxcuBD/+te/8NRTT2HhwoWw2+2YMmUKpkyZgo8++ggRERE4efIkpkyZUq+VwZ9VVlbi9ttvxz333HPausTERM/fZ86ciUceeQR6vR4xMTFQKOqPbTuX8+W6HE05byci+isWbYmIZNKnTx98/fXXSE1Nhcvlwosvvug5Sfzss88ave+QIUOQnp6O5OTkRrcLDw8/6zaNGTBgAN577z3Y7fbTRttGRUUhNjYWmZmZmDlzZosfg4iIiIjaVu/evfG///0PQgjPl/ibN29GYGAg4uPjERISArVajZ07d3oKmkajEUePHsX48eMb3e/mzZsxa9Ysz22bN29Gnz59zjlznz594HA4YLFYcOzYMZSWlmLJkiVISEgAAOzatavR+w8ZMgSHDh0667mwwWA45/Plt99+G2VlZQ2Otm3qeTsR0V+xaEtE1MZKS0tx7bXX4pZbbsGAAQMQGBiIXbt24d///jeuuOIKJCcnw2634/XXX8dll112xkkO/uyxxx7DtGnTkJiYiGuuuQYKhQL79u1DWlpavQklztX8+fPx+uuv44YbbsCiRYtgMBiwbds2jBgxAr169cKTTz6Je+65BwaDAVOnToXVasWuXbtQXl6OBQsWtFoOIiIiIjo7o9GIvXv31rstLCwMd911F1555RXcfffdmD9/PtLT0/H4449jwYIFUCgUCAwMxKxZs/Dggw8iNDQUkZGRePzxx6FQKE67UuvPHnzwQVx33XUYPHgwJk+ejO+++w5ffvklfv3112blnjhxImbMmIFhw4YhLCwMhw4dwsMPP4zzzz8fQUFBSExMhEajweuvv4477rgDaWlp9VonNGThwoUYNWoU5s+fj1tvvRX+/v44dOgQ1qxZg//85z/NyteYGTNm4Nlnn8WVV16JxYsXIyYmBnv27EFsbCxGjx7dbuftRNT5sKctEVEbCwgIwMiRI/Hyyy9j/Pjx6NevHx599FHMnTsX//nPfzBw4EC89NJLeO6559CvXz989NFHWLx4caP7nDJlCr7//nv88ssvGD58OEaNGoWXX34ZSUlJrZo9LCwM69at88yKO3ToUCxfvtwz6vbWW2/F22+/jRUrVqB///6YMGECVq5cia5du7ZqDiIiIiI6u99++w2DBw+utzz55JOIi4vDjz/+iB07dmDgwIG44447MGfOHPzzn//03Pell17C6NGjMW3aNEyePBljx45F7969G72E/8orr8Srr76KF154AX379sWyZcuwYsUKTJw4sVm5p0yZgvfeew8XXXQRevfujbvvvhtTpkzxXH0WERGBlStX4vPPP0efPn2wZMkSvPDCC43uc8CAAdiwYQOOHj2KcePGYfDgwXjssccQGxvbrGxno9Fo8MsvvyAyMhKXXHIJ+vfvjyVLlnjahbXXeTsRdT6SEELIHYKIiIiIiIiIOo6qqirExcXhxRdfxJw5c+SOQ0Tkc9gegYiIiIiIiMjH7dmzB0eOHMGIESNgNBrx1FNPAQCuuOIKmZMREfkmFm2JiIiIiIiICC+88ALS09Oh0WgwdOhQbNy4EeHh4XLHIiLySWyPQERERERERERERNSBcCIyIiIiIiIiIiIiog6ERVsiIiIiIiIiIiKiDoRFWyIiIiIiIiIiIqIOhEVbIiIiIiIiIiIiog6ERVsiIiIiIiIiIiKiDoRFWyIiIiIiIiIiIqIOhEVbIiIiIiIiIiIiog6ERVsiIiIiIiIiIiKiDoRFWyIiIiIiIiIiIqIO5P8BPIJsqrRy2U4AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The distribution of SalePrice shows a right-skewed pattern, justifying the consideration for a log transformation to normalize the distribution and improve model performance.\n",
        "\n"
      ],
      "metadata": {
        "id": "ExtXtwKpnpBO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Preprocessing Strategy Log Transformation:** Apply a log transformation to SalePrice to address its skewed distribution.\n",
        "\n",
        "**Handling Missing Values:**\n",
        "\n",
        "For features with a large proportion of missing values (e.g., PoolQC, MiscFeature, Alley, Fence, FireplaceQu), consider whether to impute, transform (e.g., indicating the absence or presence of a feature), or drop the feature based on its relevance to SalePrice.\n",
        "For numerical features like LotFrontage, imputation using the median or mean of the feature could be appropriate.\n",
        "For Garage and Bsmt-related features, missing values likely indicate the absence of a garage or basement. Creating a binary indicator variable or imputing with \"None\" (for categorical) or 0 (for numerical) could be suitable.\n",
        "\n",
        "For features with very few missing values (MasVnrArea, MasVnrType, Electrical), impute with the most common value or median, depending on whether the feature is categorical or numerical.\n",
        "Categorical Encoding: Convert categorical variables into a numerical format using one-hot encoding or label encoding, depending on the model requirements and the nature of the categorical data.\n",
        "\n",
        "**Feature Engineering:** Potential for creating new features (e.g., total square footage, age of the house) based on the existing variables."
      ],
      "metadata": {
        "id": "juxt8aXEpqUZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Log transformation of SalePrice feature\n",
        "data['LogSalePrice'] = np.log(data['SalePrice'])"
      ],
      "metadata": {
        "id": "e9y0tuNEp1ni"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['LogSalePrice'][:10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ZbemzO8tFH4",
        "outputId": "4bb3408f-49a9-4ff4-9586-546fb1e0718b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    12.247694\n",
              "1    12.109011\n",
              "2    12.317167\n",
              "3    11.849398\n",
              "4    12.429216\n",
              "5    11.870600\n",
              "6    12.634603\n",
              "7    12.206073\n",
              "8    11.774520\n",
              "9    11.678440\n",
              "Name: LogSalePrice, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Filling missing values with a label like 'None' for categorical features, especially when a large proportion of those values are missing (e.g., PoolQC, MiscFeature, Alley, Fence, FireplaceQu), is a strategic choice for several reasons:\n",
        "\n",
        "1. **Indicating Absence:** In many cases, especially with features related to amenities (like pools, alleys, fences, and fireplaces), a missing value does not mean the data is unknown but rather that the amenity is absent. By filling these missing values with 'None', we explicitly encode the absence of the feature, which can be a meaningful indicator for the model. For example, the absence of a pool (PoolQC) might be relevant information when predicting the sale price of a house.\n",
        "2. **Maintaining Data Integrity:** Dropping features with a large number of missing values might seem like a straightforward way to handle nulls, but this approach can lead to significant information loss. Many of these features, despite having many missing values, can be highly predictive of the target variable (SalePrice). Transforming the missing values allows us to retain the feature and its potential predictive power.\n",
        "3. **Model Compatibility:** Most machine learning algorithms cannot handle missing values directly and require complete datasets to function correctly. Filling in missing values ensures that the dataset can be used with a wide range of algorithms without necessitating additional preprocessing steps specific to handling NaNs.\n",
        "4. **Feature Engineering:** Transforming missing values into a distinct category (e.g., 'None') can be seen as a form of feature engineering, where the new categories might have strong predictive power. For instance, the fact that a house does not have a feature (like a fireplace) could influence its sale price differently compared to houses with that feature, and this relationship can be captured by the model.\n",
        "5. **Consistency and Interpretability:** By standardizing how missing values are treated across similar features, we maintain consistency in data preprocessing. This standardization can help in interpreting the model's output, as the impact of the absence of certain amenities on the sale price becomes clearer.\n",
        "This approach, therefore, not only preserves information that might be crucial for predicting SalePrice but also facilitates the modeling process by ensuring the dataset is fully populated and can be interpreted more intuitively."
      ],
      "metadata": {
        "id": "2FP5rq-guCXh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# For categorical features where NaN means the feature is absent\n",
        "for col in ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu']:\n",
        "    data[col].fillna('None', inplace=True)\n",
        "\n",
        "# For numerical features, considering 'LotFrontage'\n",
        "# Impute with median\n",
        "data['LotFrontage'].fillna(data['LotFrontage'].median(), inplace=True)\n",
        "\n",
        "# For Garage-related and Basement-related features\n",
        "for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n",
        "            'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n",
        "    data[col].fillna('None', inplace=True)\n",
        "\n",
        "for col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n",
        "    data[col].fillna(0, inplace=True)\n",
        "\n",
        "# MasVnrType and MasVnrArea\n",
        "data['MasVnrType'].fillna('None', inplace=True)\n",
        "data['MasVnrArea'].fillna(0, inplace=True)\n",
        "\n",
        "# Electrical - since it's just one missing value, fill with the mode\n",
        "data['Electrical'].fillna(data['Electrical'].mode()[0], inplace=True)\n"
      ],
      "metadata": {
        "id": "AmGxpHAftG5U"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['PoolQC'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RKpge2w8Hmbv",
        "outputId": "de389d29-6836-4cff-a1d6-51e945fe1e78"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "None    1453\n",
              "Gd         3\n",
              "Ex         2\n",
              "Fa         2\n",
              "Name: PoolQC, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum().sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PRe2CspRuYrI",
        "outputId": "f78e8149-3125-4811-d7d2-2c4fc41f1f5e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Id               0\n",
              "GarageCars       0\n",
              "GarageYrBlt      0\n",
              "GarageType       0\n",
              "FireplaceQu      0\n",
              "Fireplaces       0\n",
              "Functional       0\n",
              "TotRmsAbvGrd     0\n",
              "KitchenQual      0\n",
              "KitchenAbvGr     0\n",
              "BedroomAbvGr     0\n",
              "HalfBath         0\n",
              "FullBath         0\n",
              "BsmtHalfBath     0\n",
              "BsmtFullBath     0\n",
              "GrLivArea        0\n",
              "LowQualFinSF     0\n",
              "2ndFlrSF         0\n",
              "1stFlrSF         0\n",
              "GarageFinish     0\n",
              "GarageArea       0\n",
              "MSSubClass       0\n",
              "GarageQual       0\n",
              "SalePrice        0\n",
              "SaleCondition    0\n",
              "SaleType         0\n",
              "YrSold           0\n",
              "MoSold           0\n",
              "MiscVal          0\n",
              "MiscFeature      0\n",
              "Fence            0\n",
              "PoolQC           0\n",
              "PoolArea         0\n",
              "ScreenPorch      0\n",
              "3SsnPorch        0\n",
              "EnclosedPorch    0\n",
              "OpenPorchSF      0\n",
              "WoodDeckSF       0\n",
              "PavedDrive       0\n",
              "GarageCond       0\n",
              "Electrical       0\n",
              "CentralAir       0\n",
              "HeatingQC        0\n",
              "Heating          0\n",
              "OverallCond      0\n",
              "OverallQual      0\n",
              "HouseStyle       0\n",
              "BldgType         0\n",
              "Condition2       0\n",
              "Condition1       0\n",
              "Neighborhood     0\n",
              "LandSlope        0\n",
              "LotConfig        0\n",
              "Utilities        0\n",
              "LandContour      0\n",
              "LotShape         0\n",
              "Alley            0\n",
              "Street           0\n",
              "LotArea          0\n",
              "LotFrontage      0\n",
              "MSZoning         0\n",
              "YearBuilt        0\n",
              "YearRemodAdd     0\n",
              "RoofStyle        0\n",
              "BsmtCond         0\n",
              "TotalBsmtSF      0\n",
              "BsmtUnfSF        0\n",
              "BsmtFinSF2       0\n",
              "BsmtFinType2     0\n",
              "BsmtFinSF1       0\n",
              "BsmtFinType1     0\n",
              "BsmtExposure     0\n",
              "BsmtQual         0\n",
              "RoofMatl         0\n",
              "Foundation       0\n",
              "ExterCond        0\n",
              "ExterQual        0\n",
              "MasVnrArea       0\n",
              "MasVnrType       0\n",
              "Exterior2nd      0\n",
              "Exterior1st      0\n",
              "LogSalePrice     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For converting categorical variables into numerical format,\n",
        "# we'll use one-hot encoding as it doesn't assume an ordinal relationship unless the feature is ordinal\n",
        "data = pd.get_dummies(data, drop_first=True)"
      ],
      "metadata": {
        "id": "pc1rzTzwuh-a"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Feature Engineering\n",
        "\n",
        "# Total Number of Bathrooms\n",
        "data['TotalBathrooms'] = data['FullBath'] + (0.5 * data['HalfBath']) + data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath'])\n",
        "\n",
        "# Years Since Remodel\n",
        "data['YearsSinceRemodel'] = data['YrSold'] - data['YearRemodAdd']\n",
        "\n",
        "# Total Square Foot\n",
        "data['TotalSqFt'] = data['1stFlrSF'] + data['2ndFlrSF'] + data['TotalBsmtSF']\n",
        "\n",
        "# Age of the house at the time of sale\n",
        "data['HouseAge'] = data['YrSold'] - data['YearBuilt']\n"
      ],
      "metadata": {
        "id": "ETfo4eLuu1fX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The choice of these features is based on their straightforward relationship with the sale price of a house, making them intuitive examples of how feature engineering can create meaningful predictors from existing data.\n",
        "Both TotalSqFt and HouseAge are derived from basic attributes of a property that are commonly known to influence its market value. Thus, they serve as clear examples of how combining or transforming features can provide new insights or stronger signals for a predictive model."
      ],
      "metadata": {
        "id": "IqxYAUjdMmsc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np\n",
        "\n",
        "# Assuming preprocessing has been completed, and 'data' is the preprocessed DataFrame\n",
        "\n",
        "# Define features and target variable\n",
        "X = data.drop(['SalePrice', 'LogSalePrice'], axis=1)\n",
        "y = data['LogSalePrice']\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "HOy4wDbWNGYt"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Random Forest(Strong Learner)\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid_rf = {\n",
        "    'n_estimators': [100, 200],\n",
        "    'max_depth': [10, 20, None]\n",
        "}\n",
        "\n",
        "grid_search_rf = GridSearchCV(RandomForestRegressor(random_state=42), param_grid_rf, cv=5, scoring='neg_mean_squared_error')\n",
        "grid_search_rf.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "leDq1HLuOs-1",
        "outputId": "d38d7101-cb18-41d7-d61a-831f80aaf679"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "             param_grid={'max_depth': [10, 20, None],\n",
              "                         'n_estimators': [100, 200]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "             param_grid={&#x27;max_depth&#x27;: [10, 20, None],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "             param_grid={&#x27;max_depth&#x27;: [10, 20, None],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Decision Tree(Weak Learner)\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "param_grid_dt = {\n",
        "    'max_depth': [3, 5, 10, None],\n",
        "    'min_samples_leaf': [1, 2, 4]\n",
        "}\n",
        "\n",
        "grid_search_dt = GridSearchCV(DecisionTreeRegressor(random_state=42), param_grid_dt, cv=5, scoring='neg_mean_squared_error')\n",
        "grid_search_dt.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        },
        "id": "5IBs3xFDPvfQ",
        "outputId": "13cba395-6b49-4e5c-b895-e43b20d1e567"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=DecisionTreeRegressor(random_state=42),\n",
              "             param_grid={'max_depth': [3, 5, 10, None],\n",
              "                         'min_samples_leaf': [1, 2, 4]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeRegressor(random_state=42),\n",
              "             param_grid={&#x27;max_depth&#x27;: [3, 5, 10, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeRegressor(random_state=42),\n",
              "             param_grid={&#x27;max_depth&#x27;: [3, 5, 10, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Bagging with decision trees\n",
        "from sklearn.ensemble import BaggingRegressor\n",
        "\n",
        "param_grid_bagging = {\n",
        "    'n_estimators': [10, 50, 100],\n",
        "    'base_estimator__max_depth': [3, 5, 10, None]\n",
        "}\n",
        "\n",
        "grid_search_bagging = GridSearchCV(BaggingRegressor(DecisionTreeRegressor(random_state=42), random_state=42), param_grid_bagging, cv=5, scoring='neg_mean_squared_error')\n",
        "grid_search_bagging.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6gaTz6jZQVIa",
        "outputId": "d8836ff7-bcd5-47cd-aa43-6c00acf7d885"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:674: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  estimator = estimator.set_params(**cloned_parameters)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:905: FutureWarning: Parameter 'base_estimator' of BaggingRegressor is deprecated in favor of 'estimator'. See BaggingRegressor's docstring for more details.\n",
            "  clone(base_estimator).set_params(**self.best_params_)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=BaggingRegressor(estimator=DecisionTreeRegressor(random_state=42),\n",
              "                                        random_state=42),\n",
              "             param_grid={'base_estimator__max_depth': [3, 5, 10, None],\n",
              "                         'n_estimators': [10, 50, 100]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=BaggingRegressor(estimator=DecisionTreeRegressor(random_state=42),\n",
              "                                        random_state=42),\n",
              "             param_grid={&#x27;base_estimator__max_depth&#x27;: [3, 5, 10, None],\n",
              "                         &#x27;n_estimators&#x27;: [10, 50, 100]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=BaggingRegressor(estimator=DecisionTreeRegressor(random_state=42),\n",
              "                                        random_state=42),\n",
              "             param_grid={&#x27;base_estimator__max_depth&#x27;: [3, 5, 10, None],\n",
              "                         &#x27;n_estimators&#x27;: [10, 50, 100]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: BaggingRegressor</label><div class=\"sk-toggleable__content\"><pre>BaggingRegressor(estimator=DecisionTreeRegressor(random_state=42),\n",
              "                 random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Gradient Boosting (Boosting Model)\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "\n",
        "param_grid_gb = {\n",
        "    'n_estimators': [100, 200],\n",
        "    'learning_rate': [0.01, 0.1],\n",
        "    'max_depth': [3, 5, 7]\n",
        "}\n",
        "\n",
        "grid_search_gb = GridSearchCV(GradientBoostingRegressor(random_state=42), param_grid_gb, cv=5, scoring='neg_mean_squared_error')\n",
        "grid_search_gb.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "U7CNUA8HQc52",
        "outputId": "83ab2faa-b9c2-409c-81ba-958b77e05458"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=GradientBoostingRegressor(random_state=42),\n",
              "             param_grid={'learning_rate': [0.01, 0.1], 'max_depth': [3, 5, 7],\n",
              "                         'n_estimators': [100, 200]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=GradientBoostingRegressor(random_state=42),\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.1], &#x27;max_depth&#x27;: [3, 5, 7],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=GradientBoostingRegressor(random_state=42),\n",
              "             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.1], &#x27;max_depth&#x27;: [3, 5, 7],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best CV RMSE Random Forest:\", np.sqrt(-grid_search_rf.best_score_))\n",
        "print(\"Best CV RMSE Decision Tree:\", np.sqrt(-grid_search_dt.best_score_))\n",
        "print(\"Best CV RMSE Bagging:\", np.sqrt(-grid_search_bagging.best_score_))\n",
        "print(\"Best CV RMSE Gradient Boosting:\", np.sqrt(-grid_search_gb.best_score_))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pIk29gcpf5VJ",
        "outputId": "6e93bfb1-f171-4d2e-e4b7-549c59ab50cd"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best CV RMSE Random Forest: 0.14665871820091209\n",
            "Best CV RMSE Decision Tree: 0.19229419794887218\n",
            "Best CV RMSE Bagging: 0.14724048580050242\n",
            "Best CV RMSE Gradient Boosting: 0.1292996680047824\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "def evaluate_model(model, X_test, y_test):\n",
        "    predictions = model.predict(X_test)\n",
        "    mse = mean_squared_error(y_test, predictions)\n",
        "    rmse = np.sqrt(mse)\n",
        "    return rmse\n",
        "\n",
        "# Evaluate each model\n",
        "rmse_rf = evaluate_model(grid_search_rf.best_estimator_, X_test, y_test)\n",
        "rmse_dt = evaluate_model(grid_search_dt.best_estimator_, X_test, y_test)\n",
        "rmse_bagging = evaluate_model(grid_search_bagging.best_estimator_, X_test, y_test)\n",
        "rmse_gb = evaluate_model(grid_search_gb.best_estimator_, X_test, y_test)\n",
        "\n",
        "print(f\"Random Forest RMSE: {rmse_rf}\")\n",
        "print(f\"Decision Tree RMSE: {rmse_dt}\")\n",
        "print(f\"Bagging RMSE: {rmse_bagging}\")\n",
        "print(f\"Gradient Boosting RMSE: {rmse_gb}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NtidMw9SV-h9",
        "outputId": "94584cb4-89aa-45fd-beed-46da94ca9cac"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest RMSE: 0.14812273512147717\n",
            "Decision Tree RMSE: 0.19612718721973202\n",
            "Bagging RMSE: 0.14803608416308164\n",
            "Gradient Boosting RMSE: 0.14060862641452468\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming grid_rf, grid_dt, grid_bagging, and grid_gb are the GridSearchCV objects\n",
        "# for Random Forest, Decision Tree, Bagging, and Gradient Boosting respectively,\n",
        "# and have been fitted to the training data in previous steps.\n",
        "\n",
        "# Re-evaluate on the test set using the best estimators\n",
        "\n",
        "# Random Forest\n",
        "predictions_rf = grid_search_rf.best_estimator_.predict(X_test)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, predictions_rf))\n",
        "print(\"Test RMSE Random Forest:\", rmse_rf)\n",
        "\n",
        "# Decision Tree\n",
        "predictions_dt = grid_search_dt.best_estimator_.predict(X_test)\n",
        "rmse_dt = np.sqrt(mean_squared_error(y_test, predictions_dt))\n",
        "print(\"Test RMSE Decision Tree:\", rmse_dt)\n",
        "\n",
        "# Bagging with Decision Trees\n",
        "predictions_bagging = grid_search_bagging.best_estimator_.predict(X_test)\n",
        "rmse_bagging = np.sqrt(mean_squared_error(y_test, predictions_bagging))\n",
        "print(\"Test RMSE Bagging:\", rmse_bagging)\n",
        "\n",
        "# Gradient Boosting\n",
        "predictions_gb = grid_search_gb.best_estimator_.predict(X_test)\n",
        "rmse_gb = np.sqrt(mean_squared_error(y_test, predictions_gb))\n",
        "print(\"Test RMSE Gradient Boosting:\", rmse_gb)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mTR6LazIW4KH",
        "outputId": "d61fd9a5-0da7-414e-bfdc-3f3e53eac4c6"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test RMSE Random Forest: 0.14812273512147717\n",
            "Test RMSE Decision Tree: 0.19612718721973202\n",
            "Test RMSE Bagging: 0.14803608416308164\n",
            "Test RMSE Gradient Boosting: 0.14060862641452468\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Why RMSE over RMSLE?"
      ],
      "metadata": {
        "id": "8aRVl4_3nvYv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_learning_curve_with_times(estimator, title, X, y, cv=5, n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n",
        "    train_sizes, train_scores, test_scores, fit_times, _ = learning_curve(\n",
        "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes,\n",
        "        return_times=True, scoring='neg_mean_squared_error')\n",
        "\n",
        "    train_scores_mean = -np.mean(train_scores, axis=1)\n",
        "    test_scores_mean = -np.mean(test_scores, axis=1)\n",
        "    fit_times_mean = np.mean(fit_times, axis=1)\n",
        "\n",
        "    # Plot learning curve\n",
        "    _, axes = plt.subplots(1, 2, figsize=(20, 5))\n",
        "\n",
        "    axes[0].plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
        "    axes[0].plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
        "    axes[0].set_title(title)\n",
        "    axes[0].set_xlabel(\"Training examples\")\n",
        "    axes[0].set_ylabel(\"Negative Mean Squared Error\")\n",
        "    axes[0].legend(loc=\"best\")\n",
        "    axes[0].grid(True)\n",
        "\n",
        "    # Plot training times\n",
        "    axes[1].plot(train_sizes, fit_times_mean, 'o-', color=\"b\", label=\"Fit times\")\n",
        "    axes[1].set_title(title + \" (Training Times)\")\n",
        "    axes[1].set_xlabel(\"Training examples\")\n",
        "    axes[1].set_ylabel(\"Fit Times (s)\")\n",
        "    axes[1].legend(loc=\"best\")\n",
        "    axes[1].grid(True)\n",
        "\n",
        "    # Plot prediction times\n",
        "    axes[2].plot(train_sizes, [pred_times]*len(train_sizes), 'o-', color=\"purple\", label=\"Prediction times\")\n",
        "    axes[2].set_title(title + \" (Prediction Times)\")\n",
        "    axes[2].set_xlabel(\"Training examples\")\n",
        "    axes[2].set_ylabel(\"Prediction Times (s)\")\n",
        "    axes[2].legend(loc=\"best\")\n",
        "    axes[2].grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    return fit_times_mean, pred_times\n"
      ],
      "metadata": {
        "id": "Bf8tH1hFhzc3"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Call the modified plotting function for each model\n",
        "fit_times_rf = plot_learning_curve_with_times(RandomForestRegressor(n_jobs=1), 'Random Forest', X_train, y_train)\n",
        "fit_times_dt = plot_learning_curve_with_times(DecisionTreeRegressor(), 'Decision Tree', X_train, y_train)\n",
        "fit_times_bagging = plot_learning_curve_with_times(BaggingRegressor(base_estimator=DecisionTreeRegressor(), n_jobs=1), 'Bagging', X_train, y_train)\n",
        "fit_times_gb = plot_learning_curve_with_times(GradientBoostingRegressor(), 'Gradient Boosting', X_train, y_train)\n",
        "\n",
        "# Calculate the average training time for each model\n",
        "avg_time_rf = np.mean(fit_times_rf)\n",
        "avg_time_dt = np.mean(fit_times_dt)\n",
        "avg_time_bagging = np.mean(fit_times_bagging)\n",
        "avg_time_gb = np.mean(fit_times_gb)\n",
        "\n",
        "# Determine the fastest model with one worker thread\n",
        "fastest_model_single_thread = min(avg_time_rf, avg_time_dt, avg_time_bagging, avg_time_gb)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fM17OOofq1eG",
        "outputId": "35a2de11-390c-41d7-a447-e0e4f9167249"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest Regressor Learning Curve\n",
        "The Random Forest model shows a high training score that doesn't decrease much as more data is added. The cross-validation score is low compared to the training score but increases with more data, indicating that the model could benefit from even more data. This model shows a sign of high variance but low bias, as the training score is high (low error on the training set) and there is a significant gap between the training and cross-validation scores.\n",
        "\n",
        "Decision Tree Regressor Learning Curve\n",
        "The Decision Tree model has a very high training score that remains constant regardless of the number of training examples, and the cross-validation score starts low but improves as more data is provided. This is a classic sign of a model with high variance and potentially low to moderate bias.\n",
        "\n",
        "Bagging with Decision Trees Learning Curve\n",
        "The Bagging model shows better convergence between the training and cross-validation scores compared to the single Decision Tree. This indicates that bagging helps to reduce variance. The scores suggest moderate variance and potentially low bias, as the cross-validation score is reasonably high.\n",
        "\n",
        "Gradient Boosting Regressor Learning Curve\n",
        "The Gradient Boosting model's learning curve indicates that the training score is high and remains stable with the addition of more training examples. The cross-validation score is lower but improves with more data. This suggests that the model might have moderate to high variance and low bias.\n",
        "\n",
        "Analysis Based on the Provided Learning Curves:\n",
        "a. Best (Worst) Bias: The model with the highest cross-validation score will have the lowest bias, which seems to be Gradient Boosting. The model with the lowest cross-validation score, particularly at larger training set sizes, would exhibit the highest bias, which seems to be the Decision Tree.\n",
        "\n",
        "b. Best (Worst) Variance: The model with the smallest gap between training and cross-validation scores will have the lowest variance, indicating that Bagging with Decision Trees is performing best here. The Decision Tree likely has the highest variance as it has the largest gap between training and validation scores.\n",
        "\n",
        "c. Preferred Model for SalePrice Prediction: Considering the bias-variance trade-off, Bagging with Decision Trees might be the most preferable for SalePrice prediction. It shows a good balance between bias and variance, suggesting that it can generalize well to unseen data.\n",
        "\n",
        "d. Model Issues:\n",
        "\n",
        "Random Forest: Experiencing high variance, as indicated by the gap between training and validation scores.\n",
        "Decision Tree: Likely suffering from high variance and possibly moderate bias.\n",
        "Bagging with Decision Trees: Shows reduced variance compared to a single Decision Tree and seems to have low bias.\n",
        "Gradient Boosting: Exhibits moderate to high variance but low bias."
      ],
      "metadata": {
        "id": "zTxJKIDH3NWh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fastest_model_single_thread"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-TVXpktQ2Pb2",
        "outputId": "d6312a43-b0ea-4b88-a7cf-53d5679dd969"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.04502397537231446"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_learning_curve(\n",
        "    estimator,\n",
        "    title,\n",
        "    X,\n",
        "    y,\n",
        "    axes=None,\n",
        "    ylim=None,\n",
        "    cv=None,\n",
        "    n_jobs=None,\n",
        "    train_sizes=np.linspace(0.1, 1.0, 5),\n",
        "):\n",
        "\n",
        "    _, axes = plt.subplots(1, 3, figsize=(20, 5))\n",
        "\n",
        "    axes[0].set_title(title)\n",
        "    if ylim is not None:\n",
        "        axes[0].set_ylim(*ylim)\n",
        "    axes[0].set_xlabel(\"Training examples\")\n",
        "    axes[0].set_ylabel(\"Score\")\n",
        "\n",
        "    train_sizes, train_scores, test_scores, fit_times, _ = learning_curve(\n",
        "        estimator,\n",
        "        X,\n",
        "        y,\n",
        "        cv=cv,\n",
        "        n_jobs=n_jobs,\n",
        "        train_sizes=train_sizes,\n",
        "        return_times=True,\n",
        "        scoring=\"accuracy\",\n",
        "    )\n",
        "    train_scores_mean = np.mean(train_scores, axis=1)\n",
        "    train_scores_std = np.std(train_scores, axis=1)\n",
        "    test_scores_mean = np.mean(test_scores, axis=1)\n",
        "    test_scores_std = np.std(test_scores, axis=1)\n",
        "    fit_times_mean = np.mean(fit_times, axis=1)\n",
        "    fit_times_std = np.std(fit_times, axis=1)\n",
        "\n",
        "    # Plot learning curve\n",
        "    axes[0].grid()\n",
        "    axes[0].fill_between(\n",
        "        train_sizes,\n",
        "        train_scores_mean - train_scores_std,\n",
        "        train_scores_mean + train_scores_std,\n",
        "        alpha=0.1,\n",
        "        color=\"r\",\n",
        "    )\n",
        "    axes[0].fill_between(\n",
        "        train_sizes,\n",
        "        test_scores_mean - test_scores_std,\n",
        "        test_scores_mean + test_scores_std,\n",
        "        alpha=0.1,\n",
        "        color=\"g\",\n",
        "    )\n",
        "    axes[0].plot(\n",
        "        train_sizes, train_scores_mean, \"o-\", color=\"r\", label=\"Training score\"\n",
        "    )\n",
        "    axes[0].plot(\n",
        "        train_sizes, test_scores_mean, \"o-\", color=\"g\", label=\"Cross-validation score\"\n",
        "    )\n",
        "    axes[0].legend(loc=\"best\")\n",
        "\n",
        "    # Plot n_samples vs fit_times\n",
        "    axes[1].grid()\n",
        "    axes[1].plot(train_sizes, fit_times_mean, \"o-\")\n",
        "    axes[1].fill_between(\n",
        "        train_sizes,\n",
        "        fit_times_mean - fit_times_std,\n",
        "        fit_times_mean + fit_times_std,\n",
        "        alpha=0.1,\n",
        "    )\n",
        "    axes[1].set_xlabel(\"Training examples\")\n",
        "    axes[1].set_ylabel(\"fit_times\")\n",
        "    axes[1].set_title(\"Scalability of the model\")\n",
        "\n",
        "    # Plot fit_time vs score\n",
        "    fit_time_argsort = fit_times_mean.argsort()\n",
        "    fit_time_sorted = fit_times_mean[fit_time_argsort]\n",
        "    test_scores_mean_sorted = test_scores_mean[fit_time_argsort]\n",
        "    test_scores_std_sorted = test_scores_std[fit_time_argsort]\n",
        "    axes[2].grid()\n",
        "    axes[2].plot(fit_time_sorted, test_scores_mean_sorted, \"o-\")\n",
        "    axes[2].fill_between(\n",
        "        fit_time_sorted,\n",
        "        test_scores_mean_sorted - test_scores_std_sorted,\n",
        "        test_scores_mean_sorted + test_scores_std_sorted,\n",
        "        alpha=0.1,\n",
        "    )\n",
        "    axes[2].set_xlabel(\"fit_times\")\n",
        "    axes[2].set_ylabel(\"Score\")\n",
        "    axes[2].set_title(\"Performance of the model\")\n",
        "    return plt"
      ],
      "metadata": {
        "id": "EbVvvP409lFB"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "title = \"Learning Curves\"\n",
        "n_jobs = 4\n",
        "train_sizes = np.linspace(0.1, 1.0, 10)\n",
        "\n",
        "estimator = GaussianNB()\n",
        "cv = ShuffleSplit(n_splits=50, test_size=0.2, random_state=0)\n",
        "\n",
        "plot_learning_curve(estimator, title, X_train, y_train, cv=cv, n_jobs=4)\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "wF5BGFt3-Om1"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}